package br.unesp.banco.screens.deposit;

import br.unesp.banco.app.account.Account;
import br.unesp.banco.app.account.AccountFacade;
import br.unesp.banco.app.primitives.money.Money;
import br.unesp.banco.app.transaction.TransactionFacade;
import br.unesp.banco.core.ui.JFrameLoader;
import br.unesp.banco.core.ui.JFrameManager;
import br.unesp.banco.core.ui.Popup;
import br.unesp.banco.core.ui.Screen;
import br.unesp.banco.screens.main.MainAccountScreen;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;


public class DepositScreen extends Screen {
    private JPanel bodyPanel;
    private JPanel painelBts;
    private JPanel mainPanel;
    private JTextField valueInput;
    private JLabel withdrawLabel;
    private JButton backButton;
    private JLabel errorMessage;
    private JButton confirmButton;

    public final static int WIDTH = 700;
    public final static int HEIGHT = 450;

    public DepositScreen(JFrameManager frameManager) {
        super(frameManager);
        AccountFacade accountFacade = (AccountFacade) getFrameManager().getFacades().get("account");

        confirmButton.addActionListener(e -> {
            Double val;
            try {
                if (valueInput.getText().isEmpty() || valueInput.getText().matches(".*[a-zA-Z]+.*"))
                    val = -1.0;
                else
                    val = Double.valueOf(valueInput.getText().replace(',', '.'));

                TransactionFacade transactionFacade = (TransactionFacade) getFrameManager().getFacades().get("transaction");
                Account account = accountFacade.getAccount(frameManager.getUserCredentials().getId());

                transactionFacade.deposit(account.getId(), new Money(val));
                Popup.show("Depósito", "Depósito aprovado!", "Ok", null);
                JFrameLoader.load(getFrameManager(), MainAccountScreen.class, 700, 500, "Banco");

            } catch (Exception ex) {
                errorMessage.setText(ex.getMessage());
            }
        });
        backButton.addActionListener(e -> JFrameLoader.load(getFrameManager(), MainAccountScreen.class, 700, 500, "Banco"));
    }

    @Override
    public void addStyle() {
        valueInput.setSize(valueInput.getWidth(), 100);
        valueInput.setBorder(BorderFactory.createCompoundBorder(
                valueInput.getBorder(),
                BorderFactory.createEmptyBorder(10, 10, 10, 10)));
    }

    @Override
    public JPanel getMainPanel() {
        return bodyPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        bodyPanel = new JPanel();
        bodyPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        bodyPanel.setBackground(new Color(-1));
        bodyPanel.setForeground(new Color(-1));
        panel1.add(bodyPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        painelBts = new JPanel();
        painelBts.setLayout(new GridBagLayout());
        painelBts.setBackground(new Color(-1));
        painelBts.setEnabled(true);
        painelBts.setForeground(new Color(-1));
        bodyPanel.add(painelBts, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        painelBts.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        backButton = new JButton();
        backButton.setActionCommand("Saque");
        backButton.setAutoscrolls(false);
        backButton.setBackground(new Color(-16777216));
        backButton.setBorderPainted(false);
        backButton.setFocusPainted(false);
        Font backButtonFont = this.$$$getFont$$$("IBM Plex Sans", Font.BOLD, 20, backButton.getFont());
        if (backButtonFont != null) backButton.setFont(backButtonFont);
        backButton.setForeground(new Color(-1));
        backButton.setHorizontalAlignment(0);
        backButton.setMargin(new Insets(20, 20, 20, 20));
        backButton.setText("Voltar");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 0.5;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.ipadx = 220;
        painelBts.add(backButton, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        panel2.setAutoscrolls(false);
        panel2.setBackground(new Color(-1));
        panel2.setForeground(new Color(-1));
        bodyPanel.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        withdrawLabel = new JLabel();
        withdrawLabel.setBackground(new Color(-1));
        withdrawLabel.setEnabled(true);
        withdrawLabel.setFocusable(true);
        Font withdrawLabelFont = this.$$$getFont$$$("IBM Plex Sans", -1, 18, withdrawLabel.getFont());
        if (withdrawLabelFont != null) withdrawLabel.setFont(withdrawLabelFont);
        withdrawLabel.setForeground(new Color(-16777216));
        withdrawLabel.setHorizontalTextPosition(0);
        withdrawLabel.setText("Valor");
        withdrawLabel.putClientProperty("html.disable", Boolean.FALSE);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        panel2.add(withdrawLabel, gbc);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.BOTH;
        panel2.add(panel3, gbc);
        confirmButton = new JButton();
        confirmButton.setActionCommand("Saque");
        confirmButton.setAutoscrolls(false);
        confirmButton.setBackground(new Color(-14452481));
        confirmButton.setBorderPainted(false);
        confirmButton.setFocusPainted(false);
        Font confirmButtonFont = this.$$$getFont$$$("IBM Plex Sans", Font.BOLD, 20, confirmButton.getFont());
        if (confirmButtonFont != null) confirmButton.setFont(confirmButtonFont);
        confirmButton.setForeground(new Color(-1));
        confirmButton.setHorizontalAlignment(0);
        confirmButton.setMargin(new Insets(20, 20, 20, 20));
        confirmButton.setText("Confirmar");
        panel3.add(confirmButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel3.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        valueInput = new JTextField();
        valueInput.setBackground(new Color(-1));
        valueInput.setCaretColor(new Color(-16777216));
        valueInput.setEditable(true);
        Font valueInputFont = this.$$$getFont$$$("IBM Plex Sans", -1, 18, valueInput.getFont());
        if (valueInputFont != null) valueInput.setFont(valueInputFont);
        valueInput.setForeground(new Color(-16777216));
        valueInput.setMargin(new Insets(2, 6, 2, 6));
        valueInput.setOpaque(true);
        valueInput.setSelectedTextColor(new Color(-15592942));
        valueInput.setSelectionStart(0);
        valueInput.setText("");
        valueInput.putClientProperty("caretWidth", new Integer(2));
        panel3.add(valueInput, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        errorMessage = new JLabel();
        Font errorMessageFont = this.$$$getFont$$$("IBM Plex Sans", -1, 18, errorMessage.getFont());
        if (errorMessageFont != null) errorMessage.setFont(errorMessageFont);
        errorMessage.setForeground(new Color(-2555883));
        errorMessage.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        panel2.add(errorMessage, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }
}

